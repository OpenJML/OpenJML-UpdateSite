<h1>OpenJML Checks</h1>

<p>
These tables list the various checks that OpenJML performs on a Java program.
<BR><A HREF="#Java">Java language checks</A>
<BR><A HREF="#Assertions">JML assertions</A>
<BR><A HREF="#Assumptions">JML assumptions</A>
<P>
<H3>Java Language Checks</H3>
These are program errors that would result in Java runtime exceptions.
<table border="1">
<TR>
  <td>OpenJML Key<BR>Java Exception</BR></td>
  <td>Description</td>
  <td>Comments</td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyNullReference</code><BR>NullPointerException</BR></td>
  <td>Null dereference in Java expressions: o may not be null in o.f, o.m(), o[i]</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyNegativeSize</code><BR>NegativeArraySizeException</BR></td>
  <td>In Java array creation expressions, the size may not be negative</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyNegativeIndex</code><BR>ArrayIndexOutOfBoundsException</BR></td>
  <td>In Java array reference expressions, the index may not be negative</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyTooLargeIndex</code><BR>ArrayIndexOutOfBoundsException</BR></td>
  <td>In Java array reference expressions, the index must be less than the length of the array</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyDivideByZero</code><BR>ArithmeticException</BR></td>
  <td>In Java expressions, checks that a Division or Mod operation has a non-zero divisor</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyBadCast</code><BR>ClassCastException</BR></td>
  <td>In Java expressions, checks that the target type of a cast is legitimate</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyLargeShift</code></td>
  <td>In Java shift expressions (<code>a &lt;&lt; b</code>, <code>a &gt;&gt; b</code>, <code>a &gt;&gt;&gt; b</code>), only the lower 5 bits (for 32-bit operations) of the shift value (<code>b</code>) are used.
  That is, <code>a &lt;&lt; 32</code> is equivalent to no shift, not to a shift of all the bits of a 32-bit value. Though values of
  <code>b</code> larger than 31 are not illegal, they can be confusing. OpenJML warns if the value of the right-hand-side is greater or equal to the number of bits in the promoted type of the left-hand-side. </td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44>TBD<BR>AssertionError</BR></td>
  <td>Explicit Java assert statement</td>
  <td>TBD: comment on when enabled</td>
</tr>
<tr>
  <td bgcolor=#FF4444>TBD<BR>ArrayStoreException</BR></td>
  <td></td>
  <td>Planned</td>
</tr>
<tr>
  <td bgcolor=#FF4444>TBD<BR></BR></td>
  <td>Other possibilities: EmptyStackException, EnumConstantNotPresentException,
  NoSuchElementException,
  IndexOutOfBoundsException,
  StringIndexOutOfBoundsException,
  UnmodifiableSetException,
  InputMismatchException,
  ConcurrentModificationException (when multi-threaded analysis is supported)
    </td>
  <td>Possible</td>
</tr>
</table>

<H3>JML Checks</H3>
These are assertions that can be expressed in JML and are checked by OpenJML.
<table border="1">
<TR>
  <td>OpenJML Key</td>
  <td>Description</td>
  <td>Comments</td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Assert</code></td>
  <td>Explicit JML assert statement</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyNullInitialization</code></td>
  <td>The initializing expression for a declaration of a variable that is declared NonNull must not be null</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>PossiblyNullAssignment</code></td>
  <td>The value assigned to a variable or field declared NonNull must not be null</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>TBD</code></td>
  <td>Normal postconditions must be true at non-exceptional termination of a method</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Postcondition</code></td>
  <td>Exceptional postconditions must be true when a method ends with an exception</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>ExceptionalPostcondition</code></td>
  <td>Exceptional postconditions must be true when a method ends with an exception</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44>TBD</td>
  <td>Class invariants must be true when a method ends either normally or with an exception</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Assignable</code></td>
  <td>Assignable clauses must be satisfied at each assignment statement or return from a called method</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Constraint</code></td>
  <td>A constraint clause must be true at a normal or exception termination of a method (but not a constructor)</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Initially</code></td>
  <td>An initially clause must be at a normal or exceptional termination of a constructor (but not a method)</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Unreachable</code></td>
  <td>A JML unreachable statement must be be able to be executed (equivalent to 'assert false')</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>LoopInvariant</code></td>
  <td>A JML loop invariant must be true at the end of a loop body</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>LoopDecreases</code></td>
  <td>A JML loop variant value must decrease from the beginning of a loop body to the end of the loop body</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>LoopDecreasesNotPositive</code></td>
  <td>A JML loop variant value must be zero or positive at the beginning of a loop, at the beginning of each loop body, and when the loop condition tests false (but not necessarily on a break from the loop)</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedCalledMethodPrecondition</code></td>
  <td>Calling a method whose composite precondition is not true is not allowed in a JML expression.
  The composite precondition is the disjunction of all relevant (visible and normal???) specification cases.</td>
  <td></td>
</tr>
</table>

NullCheck
NullField
ExceptionList
MethodAxiom
AssumeCheck
arithmetic checks

<H3>Undefined JML expressions</H3>
JML expressions are not allowed to exit with exceptions; an expression that
does is undefined.
<table border="1">
<TR>
  <td>OpenJML Key<BR>Java Exception</BR></td>
  <td>Description</td>
  <td>Comments</td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedNullReference</code><BR>NullPointerException</BR></td>
  <td>Null dereference in JML expressions: o may not be null in o.f, o.m(), o[i]</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedNegativeSize</code><BR>NegativeArraySizeException</BR></td>
  <td>In JML array creation expressions, the size may not be negative</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedNegativeIndex</code><BR>ArrayIndexOutOfBoundsException</BR></td>
  <td>In JML array reference expressions, the index may not be negative</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedTooLargeIndex</code><BR>ArrayIndexOutOfBoundsException</BR></td>
  <td>In JML array reference expressions, the index must be less than the length of the array</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedDivideByZero</code><BR>ArithmeticException</BR></td>
  <td>Division or Mod operations with a divisor of zero are not permitted in JML expressions</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>UndefinedBadCast</code><BR>ClassCastException</BR></td>
  <td>A cast to an illegal type is not allowed in a JML expression</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>TBD</code><BR>AssertionError</BR></td>
  <td>Explicit Java assert statement</td>
  <td>TBD: comment on when enabled</td>
</tr>
</table>


<H3>JML Assumptions</H3>
These are assumptions that are explicit or implied by JML and are inserted into the program by OpenJML.
Runtime-assertion compilation can be configured to check these assumptions as assertions.
<table border="1">
<TR>
  <td>OpenJML Key</td>
  <td>Description</td>
  <td>Comments</td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Assume</code></td>
  <td>Explicit JML assume statement</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Axiom</code></td>
  <td>Axioms declared in classes are assumed to be true at the beginning of a method (and assumed to be always true, though not subsequently checked)</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>DSA</code></td>
  <td>Assumptions (assignments) introduced to implement Dynamic Static Assignment</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>Precondition</code></td>
  <td>At the beginning of a method, it is assumed that at least one precondition is true</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44><code>LoopInvariantAssumption</code></td>
  <td>A JML loop invariant is assumed to be true at the beginning of a loop body</td>
  <td></td>
</tr>


<tr>
  <td bgcolor=#44FF44>TBD</td>
  <td>Exceptional postconditions must be true when a method ends with an exception</td>
  <td></td>
</tr>
<tr>
  <td bgcolor=#44FF44>TBD</td>
  <td>Exceptional postconditions must be true when a method ends with an exception</td>
  <td></td>
</tr>
</table>

ImplicitAssume
ArgumentValue
Assignment
ReceiverValue
BlockEquation
BranchCondition
BranchThen
BranchElse
Case
Havoc
Invariant

InvariantReenterCaller
InvariantEntrance
InvariantExit
InvariantLeaveCaller

CatchCondition
SwitchValue
ArrayInit
Lbl

Return
Termination
Synthetic

LoopInvariantBeforeLoop
LoopInvariantAfterLoop

LoopCondition


