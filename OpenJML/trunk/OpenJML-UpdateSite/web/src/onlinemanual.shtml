
<h2>Introduction to OpenJML</h2>

<h3>About OpenJML</h3>
<p>
OpenJML is a suite of tools for editing, parsing, type-checking,
verifying (static checking), and run-time checking Java programs
that are annotated with JML statements stating what the program's methods are supposed to do 
and the invariants the data structures should obey. JML annotations state preconditions, postconditions, invariants and the like about a method or class; 
OpenJML's tools will then check that the implementation is consistent with those specifications.
</p>
<p>
The Java Modeling Language (JML) is a
behavioral interface specification language (BISL)
that can be used to specify the behavior of
<a href="http://java.sun.com/docs/">Java</a> modules.
It combines the design by contract approach of
<a href="http://www.eiffel.com/">Eiffel</a> and 
the model-based specification approach of the
<a href="http://www.eecs.ucf.edu/~leavens/larch-faq.html">Larch</a>
family of interface specification languages,
with some elements of the
<a href="http://www.ecs.soton.ac.uk/~mjb/refcalc-tut/home.html">
refinement calculus</a>. 
There is a web site for JML <a href="http://www.jmlspecs.org">here</a>, including a <a href="http://www.eecs.ucf.edu/~leavens/JML/jmlrefman/jmlrefman_toc.html">
Reference Manual</a> [<a href="http://www.jmlspecs.org/OldReleases/jmlrefman.pdf">PDF</a>]
[<a href="http://www.jmlspecs.org/OldReleases/jmlrefman.ps.gz">postscript</a>], 
references to key publications, 
links to groups that contribute to or use JML, 
and other documentation.
</p>

<p>
OpenJML has the following capabilities:
</p>
<ul>
<li>a command-line tool that enables</li>
<ul>
<li><strong>parsing and type-checking</strong> of Java+JML programs</li>
<li><strong>static checking</strong> of JML annotations using backend SMT solvers</li>
<li><strong>runtime-assertion checking</strong>, using an extension of the OpenJDK Java compiler</li>
</ul>
<li>an Eclipse plug-in that </li>
<ul>
<li>encapsulates the capabilities of the command-line tool in an Eclipse-style GUI</li>
<li>permits <strong>interactively exploring counter-examples </strong>resulting from failed attempts to verify assertions</li>
</ul>
<li>a programmatic API that gives access to the command-line tool capabilities from Java programs</li>
</ul>

Other features that are in development include
<ul>
<li>generation of javadoc documentation embellished with JML information,</li>
<li>generation of annotation templates,</li>
<li>inference of specifications from implementations,<li>
<li>and auto-generation of test cases using symbolic execution, guided by JML annotations.</li>
</ul>


<h3><a name="People">People</a></h3>
<p>
OpenJML is developed by David Cok. It is based on 
<a href="http://www.jmlspecs.org">JML</a>, <a href="http://openjdk.java.net/">the OpenJDK compiler</a>, 
<a href="http://eclipse.org">Eclipse plug-ins</a>, and 
<a href="http://smtlib.org">SMT-lib based SMT solvers</a>,
all of which have had countless other people contributing to them.
</p><p>
The following have also contributed to OpenJML in various ways:
</p>
<ul>
<li>John SIngleton (UCF< with Gary Leavens)
<li>Dan ZImmerman, Marieke Huisman, Wojciech Mostowski, Arend Rensink and others for usability suggestions and bugs while preparing course materials
<li>Gunjan Aggarawal (GrammaTech engineer) for reworking the organization of OpenJML testing
<li>Daniel Houck (Harvey-Mudd undersgraduate, under Dan Zimmerman) for the initial implementation of syntax coloring
<li>all those that communicated bug reports and tested fixes
</ul>


