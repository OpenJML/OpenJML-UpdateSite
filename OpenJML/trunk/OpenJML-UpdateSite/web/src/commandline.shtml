
<h2>Using the command-line tool</h2>

<h3>Basic example</h3>

OpenJML can be invoked as a command in a command-shell environment. 
It presumes that Java 1.7 and the
<code>java</code> command are available. The basic form is standard:<BR>
<center><code>java -jar openjml.jar</code> <em>options files</em></center><BR>
The options and files may be intermingled. The files are listed just as they 
would be in a java compilation command; they may include .java and .jml files. 
<em>files</em> may include folders;
listing a folder is equivalent to listing all .java and .jml files within the 
folder and its subfolders.

The <code>openjml.jar</code> library need not be in the current working 
directory (as in the example above). You may give a relative or absolute path 
to the library instead.

<h3>Using directory paths</h3>

The discussion <A href="paths.shtml">here</a> describes how OpenJML uses the
classpath, sourcepath, and specifications path to find class, source and 
specifications files.

<h3>Exit codes</h3>
The exit codes from the command-line version of OpenJML have these meanings:
<UL>
<LI>0 (<code>EXIT_OK</code>) : successful operation, no errors, there may be warnings (including static checking warnings)
<LI>1 (<code>EXIT_ERROR</code>) : normal operation, but with errors (parsing or type-checking)
<LI>2 (<code>EXIT_CMDERR</code>) : an error in the formulation of the command-line, such as invalid options
<LI>3 (<code>EXIT_SYSERR</code>) : a system error, such as out of memory
<LI>4 (<code>EXIT_ABNORMAL</code>) : a fatal error, such as a program crash, caused by an internal bug
</UL>
<h3>Command-line options</h3>

The commandline options follow the style of the OpenJDK compiler -- they begin 
with a single hyphen.
<P>
OpenJML (but not OpenJDK) options that require a parameter may either use an = followed directly by the argument or 
may provide the argument as the subsequent entry of the command. 
For example, either <code>--racbin=output</code> or
<code>--racbin output</code> is permitted. If the argument is optional 
but present, the = form must be used.
<P>
Options that are boolean in nature can be enabled and disabled by either<BR>
1) adding a prefix -no, as in <code>-showRacSource</code> and <code>-no-showRacSource</code><BR>
2) using the = form, as in <code>-showRacSource=true</code> and <code>-showRacSource=false</code>

<h4>Informational options</h4>
<UL>
<LI><B>-help</B>: gives information about the command-line options and exits, with no further processing
<LI><B>-version</B>: gives the version of this OpenJML library and exits, with no further processing
</UL>

<h4>Relevant Java compiler options</h4>
All the OpenJDK compiler options apply to OpenJML as well. The most commonly used or important OpenJDK options are listed here.
<UL>
<LI><B>-cp</B> or <B>-classpath</B>: the parameter gives the classpath to use to find unnamed but referenced classes
<LI><B>-sourcepath</B>: the parameter gives the sequence of directories in which to find source files for unnamed but referenced classes
<LI><B>-d</B>: specifies the output directory for compiled files - the directory must exist
<LI><B>-deprecation</B>: enables warnings about the use of deprecated features (applies to JML features as well)
<LI><B>-nowarn</B>: shuts off all compiler warnings, <I>including the static check warnings produced by ESC</I>
<LI><B>-Werror</B>: turns all warnings into errors, including JML (and static check) warnings
<LI><B>@<I>filename</I></B>: the given <I>filename</I> contains a list of arguments
<LI><B>-source</B>: specifies the Java version to use (default 1.7)
<LI><B>-verbose</B>: turn on Java verbose output
<LI><B>-Xprefer:source</B> or <B>-Xprefer:newer</B>: when both a .java and a .class file are present, 
whether to choose the .java (source) file or whether to choose the file that has the more recent modification time
<LI><B>-stopIfParseErrors</B>: if enabled (disabled by default), processing stops after parsing if there are any parsing errors

</UL>

<h4>OpenJML operational modes (mutually exclusive)</h4>
<UL>
<LI><B>-jml</B> (default) : use the OpenJML implementation to process the listed files, including embedded JML comments and any .jml files
<LI><B>-no-jml</b>: uses the OpenJML implementation to type-check and possibly compile the listed files, but ignores all JML annotations in those files.
<LI><B>-java</B>: processes the command-line options and files using only OpenJDK functionality. No OpenJML functionality is invoked. Must be the first option and overrides the others.
</UL>

<h4>JML operational modes (mutually exclusive)</h4>
<UL>
<LI><B>-check</B>: runs JML parsing and type-checking
<LI><B>-esc</B>: runs extended static checking
<LI><B>-rac</B>: compiles files with runtime assertions
<LI><B>-doc</B>: runs the jmldoc tool (not yet implemented)
<LI><B>-command <I>command</I></B>: runs the given command, for arguments 
<code>check</code>, <code>esc</code>, <code>rac</code>, or <code>doc</code>; 
the default is \texttt{check}
</UL>

<h4>Options applicable to all JML tasks</h4>
<UL>
<LI><B>-dir</B>: Indicates that its argument is a directory. All the .java and .jml files in the directory and its subdirectories are processed.
<LI><B>-dirs</B>: Indicates that all subsequent command-line arguments are directories, to be processed as for <code>-dir</code>, until an argument is reached that begins with a hyphen. 
<LI><B>-specspath</B>: the parameter gives the sequence of directories in which to find .jml specification files for unnamed but referenced classes
<LI><B>-checkSpecsPath</B>: if enabled (the default), warns about <code>specspath</code> elements that do not exist
<LI><B>-keys</B>: comma-separated list of the optional JML comment keys to enable
<LI><B>-strictJML</B>: (disabled by default) warns about the use of any OpenJML extensions to standard JML; disable with -no-strictJML
<LI><B>-showNotImplemented</B>: (disabled by default) warns about the use of features that are not implemented; disable with -no-showNotImplemented
</UL>

<h4>Options related to parsing and type-checking</h4>
<UL>
<LI><B>-nullableByDefault</B>: sets the global default to be that all declarations are implicitly @Nullable
<LI><B>-nonnullByDefault</B>: sets the global default to be that all declarations are implicitly @NonNull (the default)
<LI><B>-purityCheck</B>: enables (default on) checking for purity; disable with -no-purityCheck
<LI><B>-internalSpecs</B>: enables (default on) using the built-in library specifications; disable with -no-internalSpecs
<LI><B>-internalRuntime</B>: enables (default on) using the built-in runtime library; disable with -no-internalRuntime
</UL>

<h4>Options specific to static checking</h4>
<UL>
<LI><B>-prover <I>prover</I></B>: the name of the prover to use: one of z3_4_3, yices2
<LI><B>-exec <I>path</I></B>: the path to the executable corresponding to the given prover
<LI><B>-boogie</B>: enables using boogie (-prover option ignored; -exec must specify the Z3 executable)
<LI><B>-method <I>methodlist</I></B>: a comma-separated list of method names to check (default is all methods in all listed classes)
<LI><B>-exclude <I>methodlist</I></B>: a comma-separated list of method names to exclude from checking
<LI><B>-checkFeasibility <I>where</I></B>: checks feasibility of the program at various points:
one of <code>none</code>, <code>all</code>, <code>exit</code> [TBD, finish list, give default]
<LI><B>-escMaxWarnings <I>int</I></B>: the maximum number of assertion violations to look for; the argument is either a positive integer or <code>All</code> (or equivalently <code>all</code>, default is <code>All</code>)
<LI><B>-trace</B>: prints out a counterexample trace for each failed assert
<LI><B>-subexpressions</B>: prints out a counterexample trace with model values for each subexpression
<LI><B>-counterexample</B>: prints out counterexample information
<LI><B>-ce</B>: abbreviation for <code>-counterexample</code>
</UL>


<h4>Options specific to runtime checking</h4>
<UL>
<LI><B>-showNotExecutable</B>: warns about the use of features that are not executable (and thus ignored)
<LI><B>-racShowSource</B>: includes source location in RAC warning messages
<LI><B>-racCheckAssumptions</B>: enables (default on) checking <code>assume</code> statements as if they were asserts
<LI><B>-racJavaChecks</B>: enables (default on) performing JML checking of violated Java features (which will just proceed to throw an exception anyway)
<LI><B>-racCompileToJavaAssert</B>: compile RAC checks using Java asserts (which must then be enabled using <code>-ea</code>), instead of using <code>org.jmlspecs.utils.JmlAssertionFailure</code>
</UL>

<h4>Options that control output</h4>
<UL>
<LI><B>-quiet</B>: turns off all output except errors and warnings. Equivalent to <code>--verboseness=0</code>
<LI><B>-normal</B>: quiet output plus a modest amount of informational and progress output. Equivalent to <code>--verboseneness=1</code>
<LI><B>-progress</B>: normal output plus output about progress through the phases of activity and the files being processed. Equivalent to <code>--verboseneness=2</code>
<LI><B>-jmlverbose</B>: progress output plus a verbose amount of output about the phases of activity and the files being processed. Equivalent to <code>--verboseneness=3</code>
<LI><B>-jmldebug</B>: output useful only for detailed debugging (includes the jmlverbose output). Equivalent to <code>--verboseneness=4</code>
<LI><B>-verboseness <I>level</I></B>: sets the verbosity level (0-4)
<LI><B>-show</B>: prints out the various translated versions of the methods
<LI><B>-verbose</B>: enables openJDK output
<LI><B>-jmltesting</B>: adjusts the output so that test output is more stable
</UL>

To be checked and documented: -stopIfParseErrors
