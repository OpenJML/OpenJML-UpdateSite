
<h2 align="center">Using OpenJML class, source, and specifications paths</h2>

<A name="#FindingFiles"/>
<h3>Finding source, class and specification files</h3>
When a Java compiler compiles source files, it considers three types of files:
<ul>
<li>Source files listed on the command-line</li>
<li>Other source files referenced by those listed on the command-line, but not on the command-line themselves</li>
<li>Already-compiled class files</li>
</ul>
The OpenJML tool considers the same files, but also needs
<ul>
<li>Specification files associated with classes in the program</li>
</ul>

<p>
The OpenJML tool behaves in a way similar to a typical Java compiler, 
making use of three directory paths - the classpath, the sourcepath, and the specspath.  
These paths are standard lists of directories or jar files, 
separated either by colons (Unix) or semicolons (Windows).  
Java packages are subdirectories of these directories.
</p>
<ul>
<li><code>classpath</code>: The OpenJML classpath is set using one of these alternatives, in priority order:</li>
<ul>
<li>As the argument to the OpenJML command-line option <code>-classpath</code></li>
<li>As the value of the Java property <code>org.jmlspecs.openjml.classpath</code></li>
<li>As the value of the system environment variable <code>CLASSPATH</code></li>
</ul>
<li><code>sourcepath</code>: The OpenJML sourcepath is set using one of these alternatives, in priority order:</li>
<ul>
<li>As the argument of the OpenJML command-line option <code>-sourcepath</code></li>
<li>As the value of the Java property <code>org.jmlspecs.openjml.sourcepath</code></li>
<li>As the value of the OpenJML classpath (as determined above)</li>
</ul>
<li><code>specspath</code>: The OpenJML specifications path is set using one of these alternatives, in priority order:</li>
<ul>
<li>As the argument of the OpenJML command-line option <code>-specspath</code></li>
<li>As the value of the Java property <code>org.jmlspecs.openjml.specspath</code></li>
<li>As the value of the OpenJML sourcepath (as determined above)</li>
</ul>
</ul>
<p>
Note that with no command-line options or Java properties set, the result is simply that the system CLASSPATH is used for all of these paths. A common practice is to simply use a single directory path, specified on the command-line using <code>-classpath</code>, for all three paths.

The paths are used as follows to find relevant files:
</p>
<ul>
<li>Source files listed on the command-line are found directly in the file system. 
If the command-line element is an absolute path to a <code>.java</code> file, it is looked up in the file system as an absolute path; 
if the command-line element is a relative path, the file is found relative to the current working directory.</li>
<li>Classes that are referenced by files on the command-line or transitively by other classes in the program, can be found in one of two ways:</li>
<ul>
<li>The source file for the class is sought as a sub-file of an element of the <code>sourcepath</code>.</li>
<li>The class file for the class is sought as a sub-file of an element of the <code>classpath</code>.</li>
</ul>
If there is both a sourcefile and a classfile present, then TBD.
<li>The OpenJML tool also looks for a specification file for each source or 
class file used in the program. The specification file is a Java-like file that 
has a <code>.jml</code> suffix, but otherwise has the same name and Java package 
as the class that it specifies. The specification file used is the first .jml file 
with the correct name and package found in the sequence of directories and jar 
files that make up the specspath. 
If no such specification file is found, any specifications in 
the <code>.java</code> source file are used, if one exists 
(as found on the command-line or on the sourcepath); otherwise default specifications are used in conjunction with the class file. 
Note that if a .jml file 
is found, then any specifications in the corresponding .java file are 
(silently) ignored.
(TBD: what if the file on the command-line is not in the sourcepath?)</li>
</ul>

</ul>



