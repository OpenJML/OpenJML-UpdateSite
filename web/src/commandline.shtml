
<h2>Using the command-line tool</h2>

<h3>Basic example</h3>

<p>
OpenJML can be invoked as a command in a command-shell environment. 
It requires that Java 1.7 and the
<code>java</code> command are available. THe current release of OpenJML cannot be run with Java 8 or 9.
The basic form is standard:<BR>
<center><code>java -jar openjml.jar</code> <em>options files</em></center><BR>
The options and files may be intermingled. The files are listed just as they 
would be in a java compilation command; they may include .java and .jml files. 
<em>files</em> may include folders;
listing a folder is equivalent to listing all .java and .jml files within the 
folder and its subfolders. Files and folders are written as absolute paths or as
paths relative to the current working directory. [TBD - is the -dir option necessary?]

The <code>openjml.jar</code> library need not be in the current working 
directory (as in the example above). You may give a relative or absolute path 
to the library instead.
</p>

<h3>Using directory paths</h3>
<p>
The discussion <A href="paths.shtml">here</a> describes how OpenJML uses the
classpath, sourcepath, and specifications path to find class, source and 
specifications files.
</p>
<h3>Exit codes</h3>
<p>The exit codes from the command-line version of OpenJML have these meanings:</p>
<ul>
<li>0 (<code>EXIT_OK</code>) : successful operation, no errors, there may be warnings (including static checking warnings)</li>
<li>1 (<code>EXIT_ERROR</code>) : normal operation, but with errors (parsing or type-checking)</li>
<li>2 (<code>EXIT_CMDERR</code>) : an error in the formulation of the command-line, such as invalid options</li>
<li>3 (<code>EXIT_SYSERR</code>) : a system error, such as out of memory</li>
<li>4 (<code>EXIT_ABNORMAL</code>) : a fatal error, such as a program crash, caused by an internal bug</li>
</ul>
<h3>Command-line options</h3>
<p>
The commandline options follow the style of the OpenJDK compiler -- they begin 
with a single hyphen.
</p><P>
OpenJML (but not OpenJDK) options that require a parameter may either use an = followed directly by the argument or 
may provide the argument as the subsequent entry of the argument list. 
For example, either <code>--racbin=output</code> or
<code>--racbin output</code> is permitted. If the argument is optional 
but present, the = form must be used.
</p>
<P>
Options that are boolean in nature can be enabled and disabled by either<BR>
1) adding a prefix -no, as in <code>-showRacSource</code> and <code>-no-showRacSource</code><BR>
2) using the = form, as in <code>-showRacSource=true</code> and <code>-showRacSource=false</code>
</p>

<h4>Informational options</h4>
<ul>
<li><b>-help</b>: gives information about the command-line options and exits, with no further processing</li>
<li><b>-version</b>: gives the version of this OpenJML library and exits, with no further processing</li>
</ul>

<h4>Relevant Java compiler options</h4>
<p>All the OpenJDK compiler options apply to OpenJML as well. The most commonly used or important OpenJDK options are listed here.</p>
<ul>
<li><b>-cp</b> or <b>-classpath</b>: the parameter gives the classpath to use to find unnamed but referenced class files</li>
<li><b>-sourcepath</b>: the parameter gives the sequence of directories in which to find source files for unnamed but referenced classes</li>
<li><b>-d</b>: specifies the output directory for compiled files - the directory must exist</li>
<li><b>-deprecation</b>: enables warnings about the use of deprecated features (applies to JML features as well)</li>
<li><b>-nowarn</b>: shuts off all compiler warnings, <I>including the static check warnings produced by ESC</I></li>
<li><b>-Werror</b>: turns all warnings into errors, including JML (and static check) warnings</li>
<li><b>@<I>filename</I></b>: the given <I>filename</I> contains a list of arguments</li>
<li><b>-source</b>: specifies the Java version to use (default 1.7)</li>
<li><b>-verbose</b>: turn on Java verbose output</li>
<li><b>-Xprefer:source</b> or <b>-Xprefer:newer</b>: when both a .java and a .class file are present, 
whether to choose the .java (source) file or the file that has the more recent modification time</li>
<li><b>-stopIfParseErrors</b>: if enabled (disabled by default), processing stops after parsing if there are any parsing errors</li>

</ul>

<h4>OpenJML operational modes (mutually exclusive)</h4>
<ul>
<li><b>-jml</b> (default) : use the OpenJML implementation to process the listed files, including embedded JML comments and any .jml files</li>
<li><b>-no-jml</b>: uses the OpenJML implementation to type-check and possibly compile the listed files, but ignores all JML annotations in those files</li>
<li><b>-java</b>: processes the command-line options and files using only OpenJDK functionality. No OpenJML functionality is invoked. Must be the first option and overrides the others</li>
</ul>

<h4>JML operational modes (mutually exclusive)</h4>
<ul>
<li><b>-check</b>: (default) runs JML parsing and type-checking</li>
<li><b>-esc</b>: runs extended static checking</li>
<li><b>-rac</b>: compiles files with runtime assertions</li>
<li><b>-doc</b>: runs the jmldoc tool (not yet implemented)</li>
<li><b>-command <I>command</I></b>: runs the given command, for arguments
<code>check</code>, <code>esc</code>, <code>rac</code>, or <code>doc</code>; 
the default is \texttt{check}</li>
</ul>

<h4>Options applicable to all JML tasks</h4>
<ul>
<li><b>-dir</b>: Indicates that its argument is a directory. All the .java and .jml files in the directory and its subdirectories are processed.</li>
<li><b>-dirs</b>: Indicates that all subsequent command-line arguments are directories, to be processed as for <code>-dir</code>, until an argument is reached that begins with a hyphen.</li> 
<li><b>-specspath</b>: the parameter gives the sequence of directories in which to find .jml specification files for unnamed but referenced classes</li>
<li><b>-checkSpecsPath</b>: if enabled (the default), warns about <code>specspath</code> elements that do not exist</li>
<li><b>-keys</b>: comma-separated list of the optional JML comment keys to enable</li>
<li><b>-strictJML</b>: (disabled by default) warns about the use of any OpenJML extensions to standard JML; disable with -no-strictJML</li>
<li><b>-showNotImplemented</b>: (disabled by default) warns about the use of features that are not implemented; disable with -no-showNotImplemented</li>
</ul>

<h4>Options related to parsing and type-checking</h4>
<ul>
<li><b>-nullableByDefault</b>: sets the global default to be that all declarations are implicitly @Nullable</li>
<li><b>-nonnullByDefault</b>: sets the global default to be that all declarations are implicitly @NonNull (the default)</li>
<li><b>-purityCheck</b>: enables (default on) checking for purity; disable with -no-purityCheck</li>
<li><b>-internalSpecs</b>: enables (default on) using the built-in library specifications; disable with -no-internalSpecs</li>
<li><b>-internalRuntime</b>: enables (default on) using the built-in runtime library; disable with -no-internalRuntime</li>
</ul>

<h4>Options specific to static checking</h4>
<ul>
<li><b>-prover <I>prover</I></b>: the name of the prover to use: one of z3_4_3, yices2 [TBD: expand list]</li>
<li><b>-exec <I>path</I></b>: the path to the executable corresponding to the given prover</li>
<li><b>-boogie</b>: enables using boogie (-prover option ignored; -exec must specify the Z3 executable)</li>
<li><b>-method <I>methodlist</I></b>: a comma-separated list of method names to check (default is all methods in all listed classes) [TBD - describe wildcards and fully </li>
<li><b>-exclude <I>methodlist</I></b>: a comma-separated list of method names to exclude from checking</li>
<li><b>-checkFeasibility <I>where</I></b>: checks feasibility of the program at various points:
one of <code>none</code>, <code>all</code>, <code>exit</code> [TBD, finish list, give default]</li>
<li><b>-escMaxWarnings <I>int</I></b>: the maximum number of assertion violations to look for; the argument is either a positive integer or <code>All</code> (or equivalently <code>all</code>, default is <code>All</code>)</li>
<li><b>-trace</b>: prints out a counterexample trace for each failed assert</li>
<li><b>-subexpressions</b>: prints out a counterexample trace with model values for each subexpression</li>
<li><b>-counterexample</b> or <b>-ce</b>: prints out counterexample information</li>
</ul>


<h4>Options specific to runtime checking</h4>
<ul>
<li><b>-showNotExecutable</b>: warns about the use of features that are not executable (and thus ignored)</li>
<li><b>-racShowSource</b>: includes source location in RAC warning messages [ TBD: default? ]</li>
<li><b>-racCheckAssumptions</b>: enables (default on [TBD - is this default correct?]) checking <code>assume</code> statements as if they were asserts</li>
<li><b>-racJavaChecks</b>: enables (default on) performing JML checking of violated Java features (which will just proceed to throw an exception anyway)</li>
<li><b>-racCompileToJavaAssert</b>: (default off) compile RAC checks using Java asserts (which must then be enabled using <code>-ea</code>), instead of using <code>org.jmlspecs.utils.JmlAssertionFailure</code></li>
<li><b>-racPreconditionEntry</b>: (default off) enable distinguishing internal Precondition errors from entry Precondition errors, appropriate for automated testing; compiles code to generate JmlAssertionError exceptions
(rather than RAC warning messages)[TBD - should this turn on -racCheckAssumptions?]</li> 
</ul>

<h4>Options that control output</h4>
<ul>
<li><b>-quiet</b>: turns off all output except errors and warnings. Equivalent to <code>-verboseness=0</code></li>
<li><b>-normal</b>: quiet output plus a modest amount of informational and progress output. Equivalent to <code>-verboseneness=1</code></li>
<li><b>-progress</b>: normal output plus output about progress through the phases of activity and the files being processed. Equivalent to <code>-verboseneness=2</code></li>
<li><b>-jmlverbose</b>: progress output plus a verbose amount of output about the phases of activity and the files being processed. Equivalent to <code>-verboseneness=3</code></li>
<li><b>-jmldebug</b>: output useful only for detailed debugging (includes the jmlverbose output). Equivalent to <code>-verboseneness=4</code></li>
<li><b>-verboseness <I>level</I></b>: sets the verbosity level (0-4)</li>
<li><b>-show</b>: prints out the various translated versions of the methods</li>
<li><b>-verbose</b>: enables openJDK output</li>
<li><b>-jmltesting</b>: adjusts the output so that test output is more stable</li>
</ul>

